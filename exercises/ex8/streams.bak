#lang racket

; Empty stream value, and check for empty stream.
(define s-null 's-null)
(define (s-null? stream) (equal? stream 's-null))


#|
(s-cons <first> <rest>)
  <first>: A Racket expression.
  <rest>: A stream (e.g., s-null or another s-cons expression).

  Returns a new stream whose first value is <first>, and whose other items
  are the ones in <rest>. Unlike a regular list, <rest> is wrapped in a thunk,
  so it isn't evaluated until called (see s-rest below).

  Note: `thunk` is a built-in macro that wraps its argument in a nullary lambda.
|#
(define-syntax s-cons
  (syntax-rules ()
    [(s-cons <first> <rest>)
     (cons (thunk <first>) (thunk <rest>))]))

; These two define the stream-equivalents of "first" and "rest".
; We need to use car and cdr here for a technical reason that isn't important.
; Note that each one both accesses a thunk and then calls it to return the
; value stored within it.
(define (s-first stream) ((car stream)))
(define (s-rest stream) ((cdr stream)))


#|
Note: some of these are solutions for this week's lab.
But you should still complete the lab yourself if you haven't done so already!
|#

#|
(stream->list stream)
  stream: A stream

  Returns a list containing the values in this stream.
|#
(define (stream->list stream)
  (if (s-null? stream)
      null
      (cons (s-first stream) (stream->list (s-rest stream)))))


#|
(s-range start end)
  start, end: integers.

  Precondition: start <= end

  Returns a stream containing the numbers start, start+1, ..., end-1.
  Returns an empty stream if start and end are equal.
|#
(define (s-range start end)
  (if (equal? start end)
      s-null
      (s-cons start
              (s-range (+ 1 start) end))))


(define (s-map f stream)
  (if (s-null? stream)
      s-null
      (s-cons (f (s-first stream))
              (s-map f (s-rest stream)))))


(define (s-filter pred stream)
  (if (s-null? stream)
      s-null
      (let* ([x (s-first stream)]
             [xs (s-rest stream)])
      (if (pred x)
          (s-cons x (s-filter pred xs))
          (s-filter pred xs)))))


#|
(s-take stream n)
  stream: A stream
  n: A non-negative integer

  Returns a new stream that contains the first n elements of `stream`,
  or all of the elements of `stream` if it has fewer than n elements.
|#
(define (s-take stream n)
  (if (equal? n 0)
      s-null
      (s-cons (s-first stream)
              (s-take (s-rest stream) (- n 1)))))


; Tail-recursive implementation of the bisection method for finding roots.
(define (bisect f tol a b)
  (let* ([c (/ (+ a b) 2)]
         [y (f c)])
    (if (< (abs y) tol)
        c
        (if (equal? (sgn (f a)) (sgn y))
            (bisect f tol c b)
            (bisect f tol a c)))))

(define (poly x) (+ (* x x x) (* -1 x x) -2))


; Stream-based implementation of the bisection method.
(define (bisections f a b)
  (let* ([c (/ (+ a b) 2)]
         [y (f c)])
    (if (equal? (sgn (f a)) (sgn y))
        (s-cons c (bisections f c b))
        (s-cons c (bisections f a c)))))


(define (find-small tol f stream)
  (s-first (s-filter (lambda (x) (< (abs (f x)) tol)) stream)))
